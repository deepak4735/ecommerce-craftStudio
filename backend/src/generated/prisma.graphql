# source: http://localhost:4466/craftstudio/dev
# timestamp: Tue Apr 02 2019 20:02:09 GMT+0200 (Central European Summer Time)

type AggregateCategory {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductImage {
  count: Int!
}

type AggregateProductVariant {
  count: Int!
}

type AggregateStock {
  count: Int!
}

type AggregateStockLocation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVoucher {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  name: String!
  slug: String!
  description: String!
  productsInCategory(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  name: String!
  slug: String!
  description: String!
  productsInCategory: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutProductsInCategoryInput {
  create: CategoryCreateWithoutProductsInCategoryInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductsInCategoryInput {
  name: String!
  slug: String!
  description: String!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  slug: String!
  description: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: String
  productsInCategory: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  name: String
  slug: String
  description: String
}

input CategoryUpdateOneRequiredWithoutProductsInCategoryInput {
  create: CategoryCreateWithoutProductsInCategoryInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutProductsInCategoryDataInput
  upsert: CategoryUpsertWithoutProductsInCategoryInput
}

input CategoryUpdateWithoutProductsInCategoryDataInput {
  name: String
  slug: String
  description: String
}

input CategoryUpsertWithoutProductsInCategoryInput {
  update: CategoryUpdateWithoutProductsInCategoryDataInput!
  create: CategoryCreateWithoutProductsInCategoryInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  productsInCategory_every: ProductWhereInput
  productsInCategory_some: ProductWhereInput
  productsInCategory_none: ProductWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProduct(data: ProductCreateInput!): Product!
  createCategory(data: CategoryCreateInput!): Category!
  createVoucher(data: VoucherCreateInput!): Voucher!
  createStock(data: StockCreateInput!): Stock!
  createProductImage(data: ProductImageCreateInput!): ProductImage!
  createStockLocation(data: StockLocationCreateInput!): StockLocation!
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateVoucher(data: VoucherUpdateInput!, where: VoucherWhereUniqueInput!): Voucher
  updateStock(data: StockUpdateInput!, where: StockWhereUniqueInput!): Stock
  updateProductImage(data: ProductImageUpdateInput!, where: ProductImageWhereUniqueInput!): ProductImage
  updateStockLocation(data: StockLocationUpdateInput!, where: StockLocationWhereUniqueInput!): StockLocation
  updateProductVariant(data: ProductVariantUpdateInput!, where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteVoucher(where: VoucherWhereUniqueInput!): Voucher
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteStockLocation(where: StockLocationWhereUniqueInput!): StockLocation
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertVoucher(where: VoucherWhereUniqueInput!, create: VoucherCreateInput!, update: VoucherUpdateInput!): Voucher!
  upsertStock(where: StockWhereUniqueInput!, create: StockCreateInput!, update: StockUpdateInput!): Stock!
  upsertProductImage(where: ProductImageWhereUniqueInput!, create: ProductImageCreateInput!, update: ProductImageUpdateInput!): ProductImage!
  upsertStockLocation(where: StockLocationWhereUniqueInput!, create: StockLocationCreateInput!, update: StockLocationUpdateInput!): StockLocation!
  upsertProductVariant(where: ProductVariantWhereUniqueInput!, create: ProductVariantCreateInput!, update: ProductVariantUpdateInput!): ProductVariant!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyVouchers(data: VoucherUpdateManyMutationInput!, where: VoucherWhereInput): BatchPayload!
  updateManyStocks(data: StockUpdateManyMutationInput!, where: StockWhereInput): BatchPayload!
  updateManyProductImages(data: ProductImageUpdateManyMutationInput!, where: ProductImageWhereInput): BatchPayload!
  updateManyStockLocations(data: StockLocationUpdateManyMutationInput!, where: StockLocationWhereInput): BatchPayload!
  updateManyProductVariants(data: ProductVariantUpdateManyMutationInput!, where: ProductVariantWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyVouchers(where: VoucherWhereInput): BatchPayload!
  deleteManyStocks(where: StockWhereInput): BatchPayload!
  deleteManyProductImages(where: ProductImageWhereInput): BatchPayload!
  deleteManyStockLocations(where: StockLocationWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  EMPLOYEE
  USER
}

enum PrismaDatabase {
  default
}

type Product implements Node {
  id: ID!
  title: String!
  slug: String!
  description: String!
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage!]
  price: Int!
  available: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: Category!
  voucher(where: VoucherWhereInput, orderBy: VoucherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Voucher!]
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean
  productImages: ProductImageCreateManyWithoutProductInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  voucher: VoucherCreateManyWithoutProductsInput
  productVariants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateManyWithoutVoucherInput {
  create: [ProductCreateWithoutVoucherInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutProductImagesInput {
  create: ProductCreateWithoutProductImagesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean
  productImages: ProductImageCreateManyWithoutProductInput
  voucher: VoucherCreateManyWithoutProductsInput
  productVariants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutProductImagesInput {
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  voucher: VoucherCreateManyWithoutProductsInput
  productVariants: ProductVariantCreateManyWithoutProductInput
}

input ProductCreateWithoutProductVariantsInput {
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean
  productImages: ProductImageCreateManyWithoutProductInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  voucher: VoucherCreateManyWithoutProductsInput
}

input ProductCreateWithoutVoucherInput {
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean
  productImages: ProductImageCreateManyWithoutProductInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  productVariants: ProductVariantCreateManyWithoutProductInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductImage implements Node {
  id: ID!
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
  product: Product!
}

"""A connection to a list of items."""
type ProductImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductImageEdge]!
  aggregate: AggregateProductImage!
}

input ProductImageCreateInput {
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
  product: ProductCreateOneWithoutProductImagesInput!
}

input ProductImageCreateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductImageCreateWithoutProductInput {
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
}

"""An edge in a connection."""
type ProductImageEdge {
  """The item at the end of the edge."""
  node: ProductImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductImageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  thumbnail_ASC
  thumbnail_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductImagePreviousValues {
  id: ID!
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
}

input ProductImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
}

type ProductImageSubscriptionPayload {
  mutation: MutationType!
  node: ProductImage
  updatedFields: [String!]
  previousValues: ProductImagePreviousValues
}

input ProductImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductImageWhereInput
}

input ProductImageUpdateInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
  product: ProductUpdateOneRequiredWithoutProductImagesInput
}

input ProductImageUpdateManyDataInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateManyMutationInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  disconnect: [ProductImageWhereUniqueInput!]
  delete: [ProductImageWhereUniqueInput!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductImageScalarWhereInput!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput!
  data: ProductImageUpdateManyDataInput!
}

input ProductImageUpdateWithoutProductDataInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateWithoutProductDataInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  update: ProductImageUpdateWithoutProductDataInput!
  create: ProductImageCreateWithoutProductInput!
}

input ProductImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  product: ProductWhereInput
}

input ProductImageWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  available_ASC
  available_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  slug: String!
  description: String!
  price: Int!
  available: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  available: Boolean

  """All values that are not equal to given value."""
  available_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

input ProductUpdateInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  voucher: VoucherUpdateManyWithoutProductsInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateManyDataInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
}

input ProductUpdateManyMutationInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithoutVoucherInput {
  create: [ProductCreateWithoutVoucherInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutVoucherInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutVoucherInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutProductImagesInput {
  create: ProductCreateWithoutProductImagesInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutProductImagesDataInput
  upsert: ProductUpsertWithoutProductImagesInput
}

input ProductUpdateOneWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductUpdateWithoutProductVariantsDataInput
  upsert: ProductUpsertWithoutProductVariantsInput
}

input ProductUpdateWithoutCategoryDataInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  voucher: VoucherUpdateManyWithoutProductsInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutProductImagesDataInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  voucher: VoucherUpdateManyWithoutProductsInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithoutProductVariantsDataInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  voucher: VoucherUpdateManyWithoutProductsInput
}

input ProductUpdateWithoutVoucherDataInput {
  title: String
  slug: String
  description: String
  price: Int
  available: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpdateWithWhereUniqueWithoutVoucherInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutVoucherDataInput!
}

input ProductUpsertWithoutProductImagesInput {
  update: ProductUpdateWithoutProductImagesDataInput!
  create: ProductCreateWithoutProductImagesInput!
}

input ProductUpsertWithoutProductVariantsInput {
  update: ProductUpdateWithoutProductVariantsDataInput!
  create: ProductCreateWithoutProductVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

input ProductUpsertWithWhereUniqueWithoutVoucherInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutVoucherDataInput!
  create: ProductCreateWithoutVoucherInput!
}

type ProductVariant implements Node {
  id: ID!
  name: String!
  sku: String!
  product: Product
}

"""A connection to a list of items."""
type ProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductVariantEdge]!
  aggregate: AggregateProductVariant!
}

input ProductVariantCreateInput {
  name: String!
  sku: String!
  product: ProductCreateOneWithoutProductVariantsInput
}

input ProductVariantCreateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateWithoutProductInput {
  name: String!
  sku: String!
}

"""An edge in a connection."""
type ProductVariantEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sku_ASC
  sku_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  name: String!
  sku: String!
}

input ProductVariantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
}

input ProductVariantUpdateDataInput {
  name: String
  sku: String
  product: ProductUpdateOneWithoutProductVariantsInput
}

input ProductVariantUpdateInput {
  name: String
  sku: String
  product: ProductUpdateOneWithoutProductVariantsInput
}

input ProductVariantUpdateManyDataInput {
  name: String
  sku: String
}

input ProductVariantUpdateManyMutationInput {
  name: String
  sku: String
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
}

input ProductVariantUpdateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
}

input ProductVariantUpdateWithoutProductDataInput {
  name: String
  sku: String
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertNestedInput {
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

input ProductVariantWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  product: ProductWhereInput
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  available: Boolean

  """All values that are not equal to given value."""
  available_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productImages_every: ProductImageWhereInput
  productImages_some: ProductImageWhereInput
  productImages_none: ProductImageWhereInput
  category: CategoryWhereInput
  voucher_every: VoucherWhereInput
  voucher_some: VoucherWhereInput
  voucher_none: VoucherWhereInput
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  vouchers(where: VoucherWhereInput, orderBy: VoucherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Voucher]!
  stocks(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock]!
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage]!
  stockLocations(where: StockLocationWhereInput, orderBy: StockLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockLocation]!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant]!
  user(where: UserWhereUniqueInput!): User
  product(where: ProductWhereUniqueInput!): Product
  category(where: CategoryWhereUniqueInput!): Category
  voucher(where: VoucherWhereUniqueInput!): Voucher
  stock(where: StockWhereUniqueInput!): Stock
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  stockLocation(where: StockLocationWhereUniqueInput!): StockLocation
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  vouchersConnection(where: VoucherWhereInput, orderBy: VoucherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoucherConnection!
  stocksConnection(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockConnection!
  productImagesConnection(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductImageConnection!
  stockLocationsConnection(where: StockLocationWhereInput, orderBy: StockLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockLocationConnection!
  productVariantsConnection(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stock implements Node {
  id: ID!
  quantity: Int!
  quantityAllocated: Int
  variant: ProductVariant
  location: StockLocation!
}

"""A connection to a list of items."""
type StockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockEdge]!
  aggregate: AggregateStock!
}

input StockCreateInput {
  quantity: Int!
  quantityAllocated: Int
  variant: ProductVariantCreateOneInput
  location: StockLocationCreateOneInput!
}

"""An edge in a connection."""
type StockEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

type StockLocation implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type StockLocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockLocationEdge]!
  aggregate: AggregateStockLocation!
}

input StockLocationCreateInput {
  name: String!
}

input StockLocationCreateOneInput {
  create: StockLocationCreateInput
  connect: StockLocationWhereUniqueInput
}

"""An edge in a connection."""
type StockLocationEdge {
  """The item at the end of the edge."""
  node: StockLocation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockLocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StockLocationPreviousValues {
  id: ID!
  name: String!
}

type StockLocationSubscriptionPayload {
  mutation: MutationType!
  node: StockLocation
  updatedFields: [String!]
  previousValues: StockLocationPreviousValues
}

input StockLocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockLocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockLocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockLocationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockLocationWhereInput
}

input StockLocationUpdateDataInput {
  name: String
}

input StockLocationUpdateInput {
  name: String
}

input StockLocationUpdateManyMutationInput {
  name: String
}

input StockLocationUpdateOneRequiredInput {
  create: StockLocationCreateInput
  connect: StockLocationWhereUniqueInput
  update: StockLocationUpdateDataInput
  upsert: StockLocationUpsertNestedInput
}

input StockLocationUpsertNestedInput {
  update: StockLocationUpdateDataInput!
  create: StockLocationCreateInput!
}

input StockLocationWhereInput {
  """Logical AND on all given filters."""
  AND: [StockLocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockLocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockLocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input StockLocationWhereUniqueInput {
  id: ID
}

enum StockOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  quantityAllocated_ASC
  quantityAllocated_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StockPreviousValues {
  id: ID!
  quantity: Int!
  quantityAllocated: Int
}

type StockSubscriptionPayload {
  mutation: MutationType!
  node: Stock
  updatedFields: [String!]
  previousValues: StockPreviousValues
}

input StockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockWhereInput
}

input StockUpdateInput {
  quantity: Int
  quantityAllocated: Int
  variant: ProductVariantUpdateOneInput
  location: StockLocationUpdateOneRequiredInput
}

input StockUpdateManyMutationInput {
  quantity: Int
  quantityAllocated: Int
}

input StockWhereInput {
  """Logical AND on all given filters."""
  AND: [StockWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  quantityAllocated: Int

  """All values that are not equal to given value."""
  quantityAllocated_not: Int

  """All values that are contained in given list."""
  quantityAllocated_in: [Int!]

  """All values that are not contained in given list."""
  quantityAllocated_not_in: [Int!]

  """All values less than the given value."""
  quantityAllocated_lt: Int

  """All values less than or equal the given value."""
  quantityAllocated_lte: Int

  """All values greater than the given value."""
  quantityAllocated_gt: Int

  """All values greater than or equal the given value."""
  quantityAllocated_gte: Int
  variant: ProductVariantWhereInput
  location: StockLocationWhereInput
}

input StockWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  voucher(where: VoucherSubscriptionWhereInput): VoucherSubscriptionPayload
  stock(where: StockSubscriptionWhereInput): StockSubscriptionPayload
  productImage(where: ProductImageSubscriptionWhereInput): ProductImageSubscriptionPayload
  stockLocation(where: StockLocationSubscriptionWhereInput): StockLocationSubscriptionPayload
  productVariant(where: ProductVariantSubscriptionWhereInput): ProductVariantSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Voucher implements Node {
  id: ID!
  code: String!
  discountValue: Int!
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type VoucherConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoucherEdge]!
  aggregate: AggregateVoucher!
}

input VoucherCreateInput {
  code: String!
  discountValue: Int!
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
  products: ProductCreateManyWithoutVoucherInput
}

input VoucherCreateManyWithoutProductsInput {
  create: [VoucherCreateWithoutProductsInput!]
  connect: [VoucherWhereUniqueInput!]
}

input VoucherCreateWithoutProductsInput {
  code: String!
  discountValue: Int!
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
}

"""An edge in a connection."""
type VoucherEdge {
  """The item at the end of the edge."""
  node: Voucher!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoucherOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  discountValue_ASC
  discountValue_DESC
  validFrom_ASC
  validFrom_DESC
  vaildTo_ASC
  vaildTo_DESC
  used_ASC
  used_DESC
  usageLimit_ASC
  usageLimit_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VoucherPreviousValues {
  id: ID!
  code: String!
  discountValue: Int!
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
}

input VoucherScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [VoucherScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoucherScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoucherScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  discountValue: Int

  """All values that are not equal to given value."""
  discountValue_not: Int

  """All values that are contained in given list."""
  discountValue_in: [Int!]

  """All values that are not contained in given list."""
  discountValue_not_in: [Int!]

  """All values less than the given value."""
  discountValue_lt: Int

  """All values less than or equal the given value."""
  discountValue_lte: Int

  """All values greater than the given value."""
  discountValue_gt: Int

  """All values greater than or equal the given value."""
  discountValue_gte: Int
  validFrom: DateTime

  """All values that are not equal to given value."""
  validFrom_not: DateTime

  """All values that are contained in given list."""
  validFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  validFrom_not_in: [DateTime!]

  """All values less than the given value."""
  validFrom_lt: DateTime

  """All values less than or equal the given value."""
  validFrom_lte: DateTime

  """All values greater than the given value."""
  validFrom_gt: DateTime

  """All values greater than or equal the given value."""
  validFrom_gte: DateTime
  vaildTo: DateTime

  """All values that are not equal to given value."""
  vaildTo_not: DateTime

  """All values that are contained in given list."""
  vaildTo_in: [DateTime!]

  """All values that are not contained in given list."""
  vaildTo_not_in: [DateTime!]

  """All values less than the given value."""
  vaildTo_lt: DateTime

  """All values less than or equal the given value."""
  vaildTo_lte: DateTime

  """All values greater than the given value."""
  vaildTo_gt: DateTime

  """All values greater than or equal the given value."""
  vaildTo_gte: DateTime
  used: Int

  """All values that are not equal to given value."""
  used_not: Int

  """All values that are contained in given list."""
  used_in: [Int!]

  """All values that are not contained in given list."""
  used_not_in: [Int!]

  """All values less than the given value."""
  used_lt: Int

  """All values less than or equal the given value."""
  used_lte: Int

  """All values greater than the given value."""
  used_gt: Int

  """All values greater than or equal the given value."""
  used_gte: Int
  usageLimit: Int

  """All values that are not equal to given value."""
  usageLimit_not: Int

  """All values that are contained in given list."""
  usageLimit_in: [Int!]

  """All values that are not contained in given list."""
  usageLimit_not_in: [Int!]

  """All values less than the given value."""
  usageLimit_lt: Int

  """All values less than or equal the given value."""
  usageLimit_lte: Int

  """All values greater than the given value."""
  usageLimit_gt: Int

  """All values greater than or equal the given value."""
  usageLimit_gte: Int
}

type VoucherSubscriptionPayload {
  mutation: MutationType!
  node: Voucher
  updatedFields: [String!]
  previousValues: VoucherPreviousValues
}

input VoucherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoucherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoucherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoucherSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoucherWhereInput
}

input VoucherUpdateInput {
  code: String
  discountValue: Int
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
  products: ProductUpdateManyWithoutVoucherInput
}

input VoucherUpdateManyDataInput {
  code: String
  discountValue: Int
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
}

input VoucherUpdateManyMutationInput {
  code: String
  discountValue: Int
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
}

input VoucherUpdateManyWithoutProductsInput {
  create: [VoucherCreateWithoutProductsInput!]
  connect: [VoucherWhereUniqueInput!]
  set: [VoucherWhereUniqueInput!]
  disconnect: [VoucherWhereUniqueInput!]
  delete: [VoucherWhereUniqueInput!]
  update: [VoucherUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [VoucherUpdateManyWithWhereNestedInput!]
  deleteMany: [VoucherScalarWhereInput!]
  upsert: [VoucherUpsertWithWhereUniqueWithoutProductsInput!]
}

input VoucherUpdateManyWithWhereNestedInput {
  where: VoucherScalarWhereInput!
  data: VoucherUpdateManyDataInput!
}

input VoucherUpdateWithoutProductsDataInput {
  code: String
  discountValue: Int
  validFrom: DateTime
  vaildTo: DateTime
  used: Int
  usageLimit: Int
}

input VoucherUpdateWithWhereUniqueWithoutProductsInput {
  where: VoucherWhereUniqueInput!
  data: VoucherUpdateWithoutProductsDataInput!
}

input VoucherUpsertWithWhereUniqueWithoutProductsInput {
  where: VoucherWhereUniqueInput!
  update: VoucherUpdateWithoutProductsDataInput!
  create: VoucherCreateWithoutProductsInput!
}

input VoucherWhereInput {
  """Logical AND on all given filters."""
  AND: [VoucherWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoucherWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoucherWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  discountValue: Int

  """All values that are not equal to given value."""
  discountValue_not: Int

  """All values that are contained in given list."""
  discountValue_in: [Int!]

  """All values that are not contained in given list."""
  discountValue_not_in: [Int!]

  """All values less than the given value."""
  discountValue_lt: Int

  """All values less than or equal the given value."""
  discountValue_lte: Int

  """All values greater than the given value."""
  discountValue_gt: Int

  """All values greater than or equal the given value."""
  discountValue_gte: Int
  validFrom: DateTime

  """All values that are not equal to given value."""
  validFrom_not: DateTime

  """All values that are contained in given list."""
  validFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  validFrom_not_in: [DateTime!]

  """All values less than the given value."""
  validFrom_lt: DateTime

  """All values less than or equal the given value."""
  validFrom_lte: DateTime

  """All values greater than the given value."""
  validFrom_gt: DateTime

  """All values greater than or equal the given value."""
  validFrom_gte: DateTime
  vaildTo: DateTime

  """All values that are not equal to given value."""
  vaildTo_not: DateTime

  """All values that are contained in given list."""
  vaildTo_in: [DateTime!]

  """All values that are not contained in given list."""
  vaildTo_not_in: [DateTime!]

  """All values less than the given value."""
  vaildTo_lt: DateTime

  """All values less than or equal the given value."""
  vaildTo_lte: DateTime

  """All values greater than the given value."""
  vaildTo_gt: DateTime

  """All values greater than or equal the given value."""
  vaildTo_gte: DateTime
  used: Int

  """All values that are not equal to given value."""
  used_not: Int

  """All values that are contained in given list."""
  used_in: [Int!]

  """All values that are not contained in given list."""
  used_not_in: [Int!]

  """All values less than the given value."""
  used_lt: Int

  """All values less than or equal the given value."""
  used_lte: Int

  """All values greater than the given value."""
  used_gt: Int

  """All values greater than or equal the given value."""
  used_gte: Int
  usageLimit: Int

  """All values that are not equal to given value."""
  usageLimit_not: Int

  """All values that are contained in given list."""
  usageLimit_in: [Int!]

  """All values that are not contained in given list."""
  usageLimit_not_in: [Int!]

  """All values less than the given value."""
  usageLimit_lt: Int

  """All values less than or equal the given value."""
  usageLimit_lte: Int

  """All values greater than the given value."""
  usageLimit_gt: Int

  """All values greater than or equal the given value."""
  usageLimit_gte: Int
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
}

input VoucherWhereUniqueInput {
  id: ID
}
