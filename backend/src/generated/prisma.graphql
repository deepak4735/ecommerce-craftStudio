# source: https://eu1.prisma.sh/morten-vistisen-de8af9/craftstudio/dev
# timestamp: Fri May 17 2019 14:27:10 GMT+0200 (Central European Summer Time)

type AggregateAttribute {
  count: Int!
}

type AggregateAttributeValue {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateMoney {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateProductImage {
  count: Int!
}

type AggregateProductType {
  count: Int!
}

type AggregateProductVariant {
  count: Int!
}

type AggregateStock {
  count: Int!
}

type AggregateStockLocation {
  count: Int!
}

type AggregateTax {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWeight {
  count: Int!
}

type Attribute implements Node {
  id: ID!
  productType: ProductType
  productVariantType: ProductType
  attributeName: String
  attributeValues(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue!]
}

"""A connection to a list of items."""
type AttributeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeEdge]!
  aggregate: AggregateAttribute!
}

input AttributeCreateInput {
  id: ID
  attributeName: String
  productType: ProductTypeCreateOneWithoutProductAttributesInput
  productVariantType: ProductTypeCreateOneWithoutVariantAttributesInput
  attributeValues: AttributeValueCreateManyInput
}

input AttributeCreateManyWithoutProductTypeInput {
  create: [AttributeCreateWithoutProductTypeInput!]
  connect: [AttributeWhereUniqueInput!]
}

input AttributeCreateManyWithoutProductVariantTypeInput {
  create: [AttributeCreateWithoutProductVariantTypeInput!]
  connect: [AttributeWhereUniqueInput!]
}

input AttributeCreateWithoutProductTypeInput {
  id: ID
  attributeName: String
  productVariantType: ProductTypeCreateOneWithoutVariantAttributesInput
  attributeValues: AttributeValueCreateManyInput
}

input AttributeCreateWithoutProductVariantTypeInput {
  id: ID
  attributeName: String
  productType: ProductTypeCreateOneWithoutProductAttributesInput
  attributeValues: AttributeValueCreateManyInput
}

"""An edge in a connection."""
type AttributeEdge {
  """The item at the end of the edge."""
  node: Attribute!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributeOrderByInput {
  id_ASC
  id_DESC
  attributeName_ASC
  attributeName_DESC
}

type AttributePreviousValues {
  id: ID!
  attributeName: String
}

input AttributeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  attributeName: String

  """All values that are not equal to given value."""
  attributeName_not: String

  """All values that are contained in given list."""
  attributeName_in: [String!]

  """All values that are not contained in given list."""
  attributeName_not_in: [String!]

  """All values less than the given value."""
  attributeName_lt: String

  """All values less than or equal the given value."""
  attributeName_lte: String

  """All values greater than the given value."""
  attributeName_gt: String

  """All values greater than or equal the given value."""
  attributeName_gte: String

  """All values containing the given string."""
  attributeName_contains: String

  """All values not containing the given string."""
  attributeName_not_contains: String

  """All values starting with the given string."""
  attributeName_starts_with: String

  """All values not starting with the given string."""
  attributeName_not_starts_with: String

  """All values ending with the given string."""
  attributeName_ends_with: String

  """All values not ending with the given string."""
  attributeName_not_ends_with: String
}

type AttributeSubscriptionPayload {
  mutation: MutationType!
  node: Attribute
  updatedFields: [String!]
  previousValues: AttributePreviousValues
}

input AttributeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributeWhereInput
}

input AttributeUpdateInput {
  attributeName: String
  productType: ProductTypeUpdateOneWithoutProductAttributesInput
  productVariantType: ProductTypeUpdateOneWithoutVariantAttributesInput
  attributeValues: AttributeValueUpdateManyInput
}

input AttributeUpdateManyDataInput {
  attributeName: String
}

input AttributeUpdateManyMutationInput {
  attributeName: String
}

input AttributeUpdateManyWithoutProductTypeInput {
  create: [AttributeCreateWithoutProductTypeInput!]
  connect: [AttributeWhereUniqueInput!]
  set: [AttributeWhereUniqueInput!]
  disconnect: [AttributeWhereUniqueInput!]
  delete: [AttributeWhereUniqueInput!]
  update: [AttributeUpdateWithWhereUniqueWithoutProductTypeInput!]
  updateMany: [AttributeUpdateManyWithWhereNestedInput!]
  deleteMany: [AttributeScalarWhereInput!]
  upsert: [AttributeUpsertWithWhereUniqueWithoutProductTypeInput!]
}

input AttributeUpdateManyWithoutProductVariantTypeInput {
  create: [AttributeCreateWithoutProductVariantTypeInput!]
  connect: [AttributeWhereUniqueInput!]
  set: [AttributeWhereUniqueInput!]
  disconnect: [AttributeWhereUniqueInput!]
  delete: [AttributeWhereUniqueInput!]
  update: [AttributeUpdateWithWhereUniqueWithoutProductVariantTypeInput!]
  updateMany: [AttributeUpdateManyWithWhereNestedInput!]
  deleteMany: [AttributeScalarWhereInput!]
  upsert: [AttributeUpsertWithWhereUniqueWithoutProductVariantTypeInput!]
}

input AttributeUpdateManyWithWhereNestedInput {
  where: AttributeScalarWhereInput!
  data: AttributeUpdateManyDataInput!
}

input AttributeUpdateWithoutProductTypeDataInput {
  attributeName: String
  productVariantType: ProductTypeUpdateOneWithoutVariantAttributesInput
  attributeValues: AttributeValueUpdateManyInput
}

input AttributeUpdateWithoutProductVariantTypeDataInput {
  attributeName: String
  productType: ProductTypeUpdateOneWithoutProductAttributesInput
  attributeValues: AttributeValueUpdateManyInput
}

input AttributeUpdateWithWhereUniqueWithoutProductTypeInput {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateWithoutProductTypeDataInput!
}

input AttributeUpdateWithWhereUniqueWithoutProductVariantTypeInput {
  where: AttributeWhereUniqueInput!
  data: AttributeUpdateWithoutProductVariantTypeDataInput!
}

input AttributeUpsertWithWhereUniqueWithoutProductTypeInput {
  where: AttributeWhereUniqueInput!
  update: AttributeUpdateWithoutProductTypeDataInput!
  create: AttributeCreateWithoutProductTypeInput!
}

input AttributeUpsertWithWhereUniqueWithoutProductVariantTypeInput {
  where: AttributeWhereUniqueInput!
  update: AttributeUpdateWithoutProductVariantTypeDataInput!
  create: AttributeCreateWithoutProductVariantTypeInput!
}

type AttributeValue implements Node {
  id: ID!
  value: String!
}

"""A connection to a list of items."""
type AttributeValueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributeValueEdge]!
  aggregate: AggregateAttributeValue!
}

input AttributeValueCreateInput {
  id: ID
  value: String!
}

input AttributeValueCreateManyInput {
  create: [AttributeValueCreateInput!]
  connect: [AttributeValueWhereUniqueInput!]
}

"""An edge in a connection."""
type AttributeValueEdge {
  """The item at the end of the edge."""
  node: AttributeValue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributeValueOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
}

type AttributeValuePreviousValues {
  id: ID!
  value: String!
}

input AttributeValueScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

type AttributeValueSubscriptionPayload {
  mutation: MutationType!
  node: AttributeValue
  updatedFields: [String!]
  previousValues: AttributeValuePreviousValues
}

input AttributeValueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributeValueWhereInput
}

input AttributeValueUpdateDataInput {
  value: String
}

input AttributeValueUpdateInput {
  value: String
}

input AttributeValueUpdateManyDataInput {
  value: String
}

input AttributeValueUpdateManyInput {
  create: [AttributeValueCreateInput!]
  connect: [AttributeValueWhereUniqueInput!]
  set: [AttributeValueWhereUniqueInput!]
  disconnect: [AttributeValueWhereUniqueInput!]
  delete: [AttributeValueWhereUniqueInput!]
  update: [AttributeValueUpdateWithWhereUniqueNestedInput!]
  updateMany: [AttributeValueUpdateManyWithWhereNestedInput!]
  deleteMany: [AttributeValueScalarWhereInput!]
  upsert: [AttributeValueUpsertWithWhereUniqueNestedInput!]
}

input AttributeValueUpdateManyMutationInput {
  value: String
}

input AttributeValueUpdateManyWithWhereNestedInput {
  where: AttributeValueScalarWhereInput!
  data: AttributeValueUpdateManyDataInput!
}

input AttributeValueUpdateWithWhereUniqueNestedInput {
  where: AttributeValueWhereUniqueInput!
  data: AttributeValueUpdateDataInput!
}

input AttributeValueUpsertWithWhereUniqueNestedInput {
  where: AttributeValueWhereUniqueInput!
  update: AttributeValueUpdateDataInput!
  create: AttributeValueCreateInput!
}

input AttributeValueWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeValueWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeValueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeValueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values less than the given value."""
  value_lt: String

  """All values less than or equal the given value."""
  value_lte: String

  """All values greater than the given value."""
  value_gt: String

  """All values greater than or equal the given value."""
  value_gte: String

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string."""
  value_not_ends_with: String
}

input AttributeValueWhereUniqueInput {
  id: ID
}

input AttributeWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributeWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  attributeName: String

  """All values that are not equal to given value."""
  attributeName_not: String

  """All values that are contained in given list."""
  attributeName_in: [String!]

  """All values that are not contained in given list."""
  attributeName_not_in: [String!]

  """All values less than the given value."""
  attributeName_lt: String

  """All values less than or equal the given value."""
  attributeName_lte: String

  """All values greater than the given value."""
  attributeName_gt: String

  """All values greater than or equal the given value."""
  attributeName_gte: String

  """All values containing the given string."""
  attributeName_contains: String

  """All values not containing the given string."""
  attributeName_not_contains: String

  """All values starting with the given string."""
  attributeName_starts_with: String

  """All values not starting with the given string."""
  attributeName_not_starts_with: String

  """All values ending with the given string."""
  attributeName_ends_with: String

  """All values not ending with the given string."""
  attributeName_not_ends_with: String
  productType: ProductTypeWhereInput
  productVariantType: ProductTypeWhereInput
  attributeValues_every: AttributeValueWhereInput
  attributeValues_some: AttributeValueWhereInput
  attributeValues_none: AttributeValueWhereInput
}

input AttributeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Category implements Node {
  id: ID!
  name: String!
  slug: String!
  description: String!
  productsInCategory(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

"""A connection to a list of items."""
type CategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  slug: String!
  description: String!
  productsInCategory: ProductCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutProductsInCategoryInput {
  create: CategoryCreateWithoutProductsInCategoryInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductsInCategoryInput {
  id: ID
  name: String!
  slug: String!
  description: String!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
  slug: String!
  description: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: String
  productsInCategory: ProductUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  name: String
  slug: String
  description: String
}

input CategoryUpdateOneRequiredWithoutProductsInCategoryInput {
  create: CategoryCreateWithoutProductsInCategoryInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutProductsInCategoryDataInput
  upsert: CategoryUpsertWithoutProductsInCategoryInput
}

input CategoryUpdateWithoutProductsInCategoryDataInput {
  name: String
  slug: String
  description: String
}

input CategoryUpsertWithoutProductsInCategoryInput {
  update: CategoryUpdateWithoutProductsInCategoryDataInput!
  create: CategoryCreateWithoutProductsInCategoryInput!
}

input CategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  productsInCategory_every: ProductWhereInput
  productsInCategory_some: ProductWhereInput
  productsInCategory_none: ProductWhereInput
}

input CategoryWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Money implements Node {
  id: ID!
  currency: String!
  amount: Float!
  localized: String!
}

"""A connection to a list of items."""
type MoneyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MoneyEdge]!
  aggregate: AggregateMoney!
}

input MoneyCreateInput {
  id: ID
  currency: String!
  amount: Float!
  localized: String!
}

input MoneyCreateOneInput {
  create: MoneyCreateInput
  connect: MoneyWhereUniqueInput
}

"""An edge in a connection."""
type MoneyEdge {
  """The item at the end of the edge."""
  node: Money!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MoneyOrderByInput {
  id_ASC
  id_DESC
  currency_ASC
  currency_DESC
  amount_ASC
  amount_DESC
  localized_ASC
  localized_DESC
}

type MoneyPreviousValues {
  id: ID!
  currency: String!
  amount: Float!
  localized: String!
}

type MoneySubscriptionPayload {
  mutation: MutationType!
  node: Money
  updatedFields: [String!]
  previousValues: MoneyPreviousValues
}

input MoneySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MoneySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoneySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoneySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MoneyWhereInput
}

input MoneyUpdateDataInput {
  currency: String
  amount: Float
  localized: String
}

input MoneyUpdateInput {
  currency: String
  amount: Float
  localized: String
}

input MoneyUpdateManyMutationInput {
  currency: String
  amount: Float
  localized: String
}

input MoneyUpdateOneInput {
  create: MoneyCreateInput
  connect: MoneyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MoneyUpdateDataInput
  upsert: MoneyUpsertNestedInput
}

input MoneyUpsertNestedInput {
  update: MoneyUpdateDataInput!
  create: MoneyCreateInput!
}

input MoneyWhereInput {
  """Logical AND on all given filters."""
  AND: [MoneyWhereInput!]

  """Logical OR on all given filters."""
  OR: [MoneyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MoneyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  localized: String

  """All values that are not equal to given value."""
  localized_not: String

  """All values that are contained in given list."""
  localized_in: [String!]

  """All values that are not contained in given list."""
  localized_not_in: [String!]

  """All values less than the given value."""
  localized_lt: String

  """All values less than or equal the given value."""
  localized_lte: String

  """All values greater than the given value."""
  localized_gt: String

  """All values greater than or equal the given value."""
  localized_gte: String

  """All values containing the given string."""
  localized_contains: String

  """All values not containing the given string."""
  localized_not_contains: String

  """All values starting with the given string."""
  localized_starts_with: String

  """All values not starting with the given string."""
  localized_not_starts_with: String

  """All values ending with the given string."""
  localized_ends_with: String

  """All values not ending with the given string."""
  localized_not_ends_with: String
}

input MoneyWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProduct(data: ProductCreateInput!): Product!
  createCategory(data: CategoryCreateInput!): Category!
  createProductImage(data: ProductImageCreateInput!): ProductImage!
  createAttribute(data: AttributeCreateInput!): Attribute!
  createStock(data: StockCreateInput!): Stock!
  createWeight(data: WeightCreateInput!): Weight!
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant!
  createStockLocation(data: StockLocationCreateInput!): StockLocation!
  createAttributeValue(data: AttributeValueCreateInput!): AttributeValue!
  createProductType(data: ProductTypeCreateInput!): ProductType!
  createMoney(data: MoneyCreateInput!): Money!
  createTax(data: TaxCreateInput!): Tax!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateProductImage(data: ProductImageUpdateInput!, where: ProductImageWhereUniqueInput!): ProductImage
  updateAttribute(data: AttributeUpdateInput!, where: AttributeWhereUniqueInput!): Attribute
  updateStock(data: StockUpdateInput!, where: StockWhereUniqueInput!): Stock
  updateWeight(data: WeightUpdateInput!, where: WeightWhereUniqueInput!): Weight
  updateProductVariant(data: ProductVariantUpdateInput!, where: ProductVariantWhereUniqueInput!): ProductVariant
  updateStockLocation(data: StockLocationUpdateInput!, where: StockLocationWhereUniqueInput!): StockLocation
  updateAttributeValue(data: AttributeValueUpdateInput!, where: AttributeValueWhereUniqueInput!): AttributeValue
  updateProductType(data: ProductTypeUpdateInput!, where: ProductTypeWhereUniqueInput!): ProductType
  updateMoney(data: MoneyUpdateInput!, where: MoneyWhereUniqueInput!): Money
  updateTax(data: TaxUpdateInput!, where: TaxWhereUniqueInput!): Tax
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteAttribute(where: AttributeWhereUniqueInput!): Attribute
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteWeight(where: WeightWhereUniqueInput!): Weight
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteStockLocation(where: StockLocationWhereUniqueInput!): StockLocation
  deleteAttributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  deleteProductType(where: ProductTypeWhereUniqueInput!): ProductType
  deleteMoney(where: MoneyWhereUniqueInput!): Money
  deleteTax(where: TaxWhereUniqueInput!): Tax
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  upsertProductImage(where: ProductImageWhereUniqueInput!, create: ProductImageCreateInput!, update: ProductImageUpdateInput!): ProductImage!
  upsertAttribute(where: AttributeWhereUniqueInput!, create: AttributeCreateInput!, update: AttributeUpdateInput!): Attribute!
  upsertStock(where: StockWhereUniqueInput!, create: StockCreateInput!, update: StockUpdateInput!): Stock!
  upsertWeight(where: WeightWhereUniqueInput!, create: WeightCreateInput!, update: WeightUpdateInput!): Weight!
  upsertProductVariant(where: ProductVariantWhereUniqueInput!, create: ProductVariantCreateInput!, update: ProductVariantUpdateInput!): ProductVariant!
  upsertStockLocation(where: StockLocationWhereUniqueInput!, create: StockLocationCreateInput!, update: StockLocationUpdateInput!): StockLocation!
  upsertAttributeValue(where: AttributeValueWhereUniqueInput!, create: AttributeValueCreateInput!, update: AttributeValueUpdateInput!): AttributeValue!
  upsertProductType(where: ProductTypeWhereUniqueInput!, create: ProductTypeCreateInput!, update: ProductTypeUpdateInput!): ProductType!
  upsertMoney(where: MoneyWhereUniqueInput!, create: MoneyCreateInput!, update: MoneyUpdateInput!): Money!
  upsertTax(where: TaxWhereUniqueInput!, create: TaxCreateInput!, update: TaxUpdateInput!): Tax!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyProductImages(data: ProductImageUpdateManyMutationInput!, where: ProductImageWhereInput): BatchPayload!
  updateManyAttributes(data: AttributeUpdateManyMutationInput!, where: AttributeWhereInput): BatchPayload!
  updateManyStocks(data: StockUpdateManyMutationInput!, where: StockWhereInput): BatchPayload!
  updateManyWeights(data: WeightUpdateManyMutationInput!, where: WeightWhereInput): BatchPayload!
  updateManyProductVariants(data: ProductVariantUpdateManyMutationInput!, where: ProductVariantWhereInput): BatchPayload!
  updateManyStockLocations(data: StockLocationUpdateManyMutationInput!, where: StockLocationWhereInput): BatchPayload!
  updateManyAttributeValues(data: AttributeValueUpdateManyMutationInput!, where: AttributeValueWhereInput): BatchPayload!
  updateManyProductTypes(data: ProductTypeUpdateManyMutationInput!, where: ProductTypeWhereInput): BatchPayload!
  updateManyMoneys(data: MoneyUpdateManyMutationInput!, where: MoneyWhereInput): BatchPayload!
  updateManyTaxes(data: TaxUpdateManyMutationInput!, where: TaxWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  deleteManyProductImages(where: ProductImageWhereInput): BatchPayload!
  deleteManyAttributes(where: AttributeWhereInput): BatchPayload!
  deleteManyStocks(where: StockWhereInput): BatchPayload!
  deleteManyWeights(where: WeightWhereInput): BatchPayload!
  deleteManyProductVariants(where: ProductVariantWhereInput): BatchPayload!
  deleteManyStockLocations(where: StockLocationWhereInput): BatchPayload!
  deleteManyAttributeValues(where: AttributeValueWhereInput): BatchPayload!
  deleteManyProductTypes(where: ProductTypeWhereInput): BatchPayload!
  deleteManyMoneys(where: MoneyWhereInput): BatchPayload!
  deleteManyTaxes(where: TaxWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  EMPLOYEE
  USER
}

type Product implements Node {
  id: ID!
  title: String!
  slug: String!
  description: String!
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage!]
  basePrice: Money
  isAvailable: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: Category!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant!]
  productType: ProductType!
  weight: Weight
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  title: String!
  slug: String!
  description: String!
  isAvailable: Boolean!
  productImages: ProductImageCreateManyWithoutProductInput
  basePrice: MoneyCreateOneInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  productVariants: ProductVariantCreateManyWithoutProductInput
  productType: ProductTypeCreateOneInput!
  weight: WeightCreateOneInput
}

input ProductCreateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateOneWithoutProductImagesInput {
  create: ProductCreateWithoutProductImagesInput
  connect: ProductWhereUniqueInput
}

input ProductCreateOneWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
}

input ProductCreateWithoutCategoryInput {
  id: ID
  title: String!
  slug: String!
  description: String!
  isAvailable: Boolean!
  productImages: ProductImageCreateManyWithoutProductInput
  basePrice: MoneyCreateOneInput
  productVariants: ProductVariantCreateManyWithoutProductInput
  productType: ProductTypeCreateOneInput!
  weight: WeightCreateOneInput
}

input ProductCreateWithoutProductImagesInput {
  id: ID
  title: String!
  slug: String!
  description: String!
  isAvailable: Boolean!
  basePrice: MoneyCreateOneInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  productVariants: ProductVariantCreateManyWithoutProductInput
  productType: ProductTypeCreateOneInput!
  weight: WeightCreateOneInput
}

input ProductCreateWithoutProductVariantsInput {
  id: ID
  title: String!
  slug: String!
  description: String!
  isAvailable: Boolean!
  productImages: ProductImageCreateManyWithoutProductInput
  basePrice: MoneyCreateOneInput
  category: CategoryCreateOneWithoutProductsInCategoryInput!
  productType: ProductTypeCreateOneInput!
  weight: WeightCreateOneInput
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product!

  """A cursor for use in pagination."""
  cursor: String!
}

type ProductImage implements Node {
  id: ID!
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
  product: Product!
}

"""A connection to a list of items."""
type ProductImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductImageEdge]!
  aggregate: AggregateProductImage!
}

input ProductImageCreateInput {
  id: ID
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
  product: ProductCreateOneWithoutProductImagesInput!
}

input ProductImageCreateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductImageCreateWithoutProductInput {
  id: ID
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
}

"""An edge in a connection."""
type ProductImageEdge {
  """The item at the end of the edge."""
  node: ProductImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductImageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  thumbnail_ASC
  thumbnail_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
}

type ProductImagePreviousValues {
  id: ID!
  title: String!
  thumbnail: String
  image: String!
  largeImage: String!
}

input ProductImageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
}

type ProductImageSubscriptionPayload {
  mutation: MutationType!
  node: ProductImage
  updatedFields: [String!]
  previousValues: ProductImagePreviousValues
}

input ProductImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductImageWhereInput
}

input ProductImageUpdateInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
  product: ProductUpdateOneRequiredWithoutProductImagesInput
}

input ProductImageUpdateManyDataInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateManyMutationInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateManyWithoutProductInput {
  create: [ProductImageCreateWithoutProductInput!]
  connect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  disconnect: [ProductImageWhereUniqueInput!]
  delete: [ProductImageWhereUniqueInput!]
  update: [ProductImageUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductImageUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductImageScalarWhereInput!]
  upsert: [ProductImageUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductImageUpdateManyWithWhereNestedInput {
  where: ProductImageScalarWhereInput!
  data: ProductImageUpdateManyDataInput!
}

input ProductImageUpdateWithoutProductDataInput {
  title: String
  thumbnail: String
  image: String
  largeImage: String
}

input ProductImageUpdateWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateWithoutProductDataInput!
}

input ProductImageUpsertWithWhereUniqueWithoutProductInput {
  where: ProductImageWhereUniqueInput!
  update: ProductImageUpdateWithoutProductDataInput!
  create: ProductImageCreateWithoutProductInput!
}

input ProductImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  product: ProductWhereInput
}

input ProductImageWhereUniqueInput {
  id: ID
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  description_ASC
  description_DESC
  isAvailable_ASC
  isAvailable_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductPreviousValues {
  id: ID!
  title: String!
  slug: String!
  description: String!
  isAvailable: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProductScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isAvailable: Boolean

  """All values that are not equal to given value."""
  isAvailable_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
}

type ProductType implements Node {
  id: ID!
  name: String!
  shippingRequired: Boolean!
  weight: Weight
  taxes: Tax
  hasVariants: Boolean
  productAttributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute!]
  variantAttributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute!]
}

"""A connection to a list of items."""
type ProductTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductTypeEdge]!
  aggregate: AggregateProductType!
}

input ProductTypeCreateInput {
  id: ID
  name: String!
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightCreateOneInput
  taxes: TaxCreateOneInput
  productAttributes: AttributeCreateManyWithoutProductTypeInput
  variantAttributes: AttributeCreateManyWithoutProductVariantTypeInput
}

input ProductTypeCreateOneInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
}

input ProductTypeCreateOneWithoutProductAttributesInput {
  create: ProductTypeCreateWithoutProductAttributesInput
  connect: ProductTypeWhereUniqueInput
}

input ProductTypeCreateOneWithoutVariantAttributesInput {
  create: ProductTypeCreateWithoutVariantAttributesInput
  connect: ProductTypeWhereUniqueInput
}

input ProductTypeCreateWithoutProductAttributesInput {
  id: ID
  name: String!
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightCreateOneInput
  taxes: TaxCreateOneInput
  variantAttributes: AttributeCreateManyWithoutProductVariantTypeInput
}

input ProductTypeCreateWithoutVariantAttributesInput {
  id: ID
  name: String!
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightCreateOneInput
  taxes: TaxCreateOneInput
  productAttributes: AttributeCreateManyWithoutProductTypeInput
}

"""An edge in a connection."""
type ProductTypeEdge {
  """The item at the end of the edge."""
  node: ProductType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  shippingRequired_ASC
  shippingRequired_DESC
  hasVariants_ASC
  hasVariants_DESC
}

type ProductTypePreviousValues {
  id: ID!
  name: String!
  shippingRequired: Boolean!
  hasVariants: Boolean
}

type ProductTypeSubscriptionPayload {
  mutation: MutationType!
  node: ProductType
  updatedFields: [String!]
  previousValues: ProductTypePreviousValues
}

input ProductTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTypeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductTypeWhereInput
}

input ProductTypeUpdateDataInput {
  name: String
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightUpdateOneInput
  taxes: TaxUpdateOneInput
  productAttributes: AttributeUpdateManyWithoutProductTypeInput
  variantAttributes: AttributeUpdateManyWithoutProductVariantTypeInput
}

input ProductTypeUpdateInput {
  name: String
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightUpdateOneInput
  taxes: TaxUpdateOneInput
  productAttributes: AttributeUpdateManyWithoutProductTypeInput
  variantAttributes: AttributeUpdateManyWithoutProductVariantTypeInput
}

input ProductTypeUpdateManyMutationInput {
  name: String
  shippingRequired: Boolean
  hasVariants: Boolean
}

input ProductTypeUpdateOneRequiredInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
  update: ProductTypeUpdateDataInput
  upsert: ProductTypeUpsertNestedInput
}

input ProductTypeUpdateOneWithoutProductAttributesInput {
  create: ProductTypeCreateWithoutProductAttributesInput
  connect: ProductTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductTypeUpdateWithoutProductAttributesDataInput
  upsert: ProductTypeUpsertWithoutProductAttributesInput
}

input ProductTypeUpdateOneWithoutVariantAttributesInput {
  create: ProductTypeCreateWithoutVariantAttributesInput
  connect: ProductTypeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductTypeUpdateWithoutVariantAttributesDataInput
  upsert: ProductTypeUpsertWithoutVariantAttributesInput
}

input ProductTypeUpdateWithoutProductAttributesDataInput {
  name: String
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightUpdateOneInput
  taxes: TaxUpdateOneInput
  variantAttributes: AttributeUpdateManyWithoutProductVariantTypeInput
}

input ProductTypeUpdateWithoutVariantAttributesDataInput {
  name: String
  shippingRequired: Boolean
  hasVariants: Boolean
  weight: WeightUpdateOneInput
  taxes: TaxUpdateOneInput
  productAttributes: AttributeUpdateManyWithoutProductTypeInput
}

input ProductTypeUpsertNestedInput {
  update: ProductTypeUpdateDataInput!
  create: ProductTypeCreateInput!
}

input ProductTypeUpsertWithoutProductAttributesInput {
  update: ProductTypeUpdateWithoutProductAttributesDataInput!
  create: ProductTypeCreateWithoutProductAttributesInput!
}

input ProductTypeUpsertWithoutVariantAttributesInput {
  update: ProductTypeUpdateWithoutVariantAttributesDataInput!
  create: ProductTypeCreateWithoutVariantAttributesInput!
}

input ProductTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shippingRequired: Boolean

  """All values that are not equal to given value."""
  shippingRequired_not: Boolean
  hasVariants: Boolean

  """All values that are not equal to given value."""
  hasVariants_not: Boolean
  weight: WeightWhereInput
  taxes: TaxWhereInput
  productAttributes_every: AttributeWhereInput
  productAttributes_some: AttributeWhereInput
  productAttributes_none: AttributeWhereInput
  variantAttributes_every: AttributeWhereInput
  variantAttributes_some: AttributeWhereInput
  variantAttributes_none: AttributeWhereInput
}

input ProductTypeWhereUniqueInput {
  id: ID
}

input ProductUpdateInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  basePrice: MoneyUpdateOneInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
  productType: ProductTypeUpdateOneRequiredInput
  weight: WeightUpdateOneInput
}

input ProductUpdateManyDataInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
}

input ProductUpdateManyMutationInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
}

input ProductUpdateManyWithoutCategoryInput {
  create: [ProductCreateWithoutCategoryInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductScalarWhereInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateOneRequiredWithoutProductImagesInput {
  create: ProductCreateWithoutProductImagesInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutProductImagesDataInput
  upsert: ProductUpsertWithoutProductImagesInput
}

input ProductUpdateOneRequiredWithoutProductVariantsInput {
  create: ProductCreateWithoutProductVariantsInput
  connect: ProductWhereUniqueInput
  update: ProductUpdateWithoutProductVariantsDataInput
  upsert: ProductUpsertWithoutProductVariantsInput
}

input ProductUpdateWithoutCategoryDataInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  basePrice: MoneyUpdateOneInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
  productType: ProductTypeUpdateOneRequiredInput
  weight: WeightUpdateOneInput
}

input ProductUpdateWithoutProductImagesDataInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
  basePrice: MoneyUpdateOneInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  productVariants: ProductVariantUpdateManyWithoutProductInput
  productType: ProductTypeUpdateOneRequiredInput
  weight: WeightUpdateOneInput
}

input ProductUpdateWithoutProductVariantsDataInput {
  title: String
  slug: String
  description: String
  isAvailable: Boolean
  productImages: ProductImageUpdateManyWithoutProductInput
  basePrice: MoneyUpdateOneInput
  category: CategoryUpdateOneRequiredWithoutProductsInCategoryInput
  productType: ProductTypeUpdateOneRequiredInput
  weight: WeightUpdateOneInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoryDataInput!
}

input ProductUpsertWithoutProductImagesInput {
  update: ProductUpdateWithoutProductImagesDataInput!
  create: ProductCreateWithoutProductImagesInput!
}

input ProductUpsertWithoutProductVariantsInput {
  update: ProductUpdateWithoutProductVariantsDataInput!
  create: ProductCreateWithoutProductVariantsInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoryDataInput!
  create: ProductCreateWithoutCategoryInput!
}

type ProductVariant implements Node {
  id: ID!
  sku: String!
  name: String!
  product: Product!
  quantity: Int!
  quantityAllocated: Int!
  weight: Weight
  stockQuantity: Int!
  price: Money
  isAvailable: Boolean
  costPrice: Money
}

"""A connection to a list of items."""
type ProductVariantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductVariantEdge]!
  aggregate: AggregateProductVariant!
}

input ProductVariantCreateInput {
  id: ID
  sku: String!
  name: String!
  quantity: Int!
  quantityAllocated: Int!
  stockQuantity: Int!
  isAvailable: Boolean
  product: ProductCreateOneWithoutProductVariantsInput!
  weight: WeightCreateOneInput
  price: MoneyCreateOneInput
  costPrice: MoneyCreateOneInput
}

input ProductVariantCreateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductVariantCreateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input ProductVariantCreateWithoutProductInput {
  id: ID
  sku: String!
  name: String!
  quantity: Int!
  quantityAllocated: Int!
  stockQuantity: Int!
  isAvailable: Boolean
  weight: WeightCreateOneInput
  price: MoneyCreateOneInput
  costPrice: MoneyCreateOneInput
}

"""An edge in a connection."""
type ProductVariantEdge {
  """The item at the end of the edge."""
  node: ProductVariant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProductVariantOrderByInput {
  id_ASC
  id_DESC
  sku_ASC
  sku_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
  quantityAllocated_ASC
  quantityAllocated_DESC
  stockQuantity_ASC
  stockQuantity_DESC
  isAvailable_ASC
  isAvailable_DESC
}

type ProductVariantPreviousValues {
  id: ID!
  sku: String!
  name: String!
  quantity: Int!
  quantityAllocated: Int!
  stockQuantity: Int!
  isAvailable: Boolean
}

input ProductVariantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  quantityAllocated: Int

  """All values that are not equal to given value."""
  quantityAllocated_not: Int

  """All values that are contained in given list."""
  quantityAllocated_in: [Int!]

  """All values that are not contained in given list."""
  quantityAllocated_not_in: [Int!]

  """All values less than the given value."""
  quantityAllocated_lt: Int

  """All values less than or equal the given value."""
  quantityAllocated_lte: Int

  """All values greater than the given value."""
  quantityAllocated_gt: Int

  """All values greater than or equal the given value."""
  quantityAllocated_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  isAvailable: Boolean

  """All values that are not equal to given value."""
  isAvailable_not: Boolean
}

type ProductVariantSubscriptionPayload {
  mutation: MutationType!
  node: ProductVariant
  updatedFields: [String!]
  previousValues: ProductVariantPreviousValues
}

input ProductVariantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProductVariantWhereInput
}

input ProductVariantUpdateDataInput {
  sku: String
  name: String
  quantity: Int
  quantityAllocated: Int
  stockQuantity: Int
  isAvailable: Boolean
  product: ProductUpdateOneRequiredWithoutProductVariantsInput
  weight: WeightUpdateOneInput
  price: MoneyUpdateOneInput
  costPrice: MoneyUpdateOneInput
}

input ProductVariantUpdateInput {
  sku: String
  name: String
  quantity: Int
  quantityAllocated: Int
  stockQuantity: Int
  isAvailable: Boolean
  product: ProductUpdateOneRequiredWithoutProductVariantsInput
  weight: WeightUpdateOneInput
  price: MoneyUpdateOneInput
  costPrice: MoneyUpdateOneInput
}

input ProductVariantUpdateManyDataInput {
  sku: String
  name: String
  quantity: Int
  quantityAllocated: Int
  stockQuantity: Int
  isAvailable: Boolean
}

input ProductVariantUpdateManyMutationInput {
  sku: String
  name: String
  quantity: Int
  quantityAllocated: Int
  stockQuantity: Int
  isAvailable: Boolean
}

input ProductVariantUpdateManyWithoutProductInput {
  create: [ProductVariantCreateWithoutProductInput!]
  connect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  disconnect: [ProductVariantWhereUniqueInput!]
  delete: [ProductVariantWhereUniqueInput!]
  update: [ProductVariantUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductVariantUpdateManyWithWhereNestedInput!]
  deleteMany: [ProductVariantScalarWhereInput!]
  upsert: [ProductVariantUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductVariantUpdateManyWithWhereNestedInput {
  where: ProductVariantScalarWhereInput!
  data: ProductVariantUpdateManyDataInput!
}

input ProductVariantUpdateOneInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProductVariantUpdateDataInput
  upsert: ProductVariantUpsertNestedInput
}

input ProductVariantUpdateWithoutProductDataInput {
  sku: String
  name: String
  quantity: Int
  quantityAllocated: Int
  stockQuantity: Int
  isAvailable: Boolean
  weight: WeightUpdateOneInput
  price: MoneyUpdateOneInput
  costPrice: MoneyUpdateOneInput
}

input ProductVariantUpdateWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateWithoutProductDataInput!
}

input ProductVariantUpsertNestedInput {
  update: ProductVariantUpdateDataInput!
  create: ProductVariantCreateInput!
}

input ProductVariantUpsertWithWhereUniqueWithoutProductInput {
  where: ProductVariantWhereUniqueInput!
  update: ProductVariantUpdateWithoutProductDataInput!
  create: ProductVariantCreateWithoutProductInput!
}

input ProductVariantWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductVariantWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductVariantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductVariantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sku: String

  """All values that are not equal to given value."""
  sku_not: String

  """All values that are contained in given list."""
  sku_in: [String!]

  """All values that are not contained in given list."""
  sku_not_in: [String!]

  """All values less than the given value."""
  sku_lt: String

  """All values less than or equal the given value."""
  sku_lte: String

  """All values greater than the given value."""
  sku_gt: String

  """All values greater than or equal the given value."""
  sku_gte: String

  """All values containing the given string."""
  sku_contains: String

  """All values not containing the given string."""
  sku_not_contains: String

  """All values starting with the given string."""
  sku_starts_with: String

  """All values not starting with the given string."""
  sku_not_starts_with: String

  """All values ending with the given string."""
  sku_ends_with: String

  """All values not ending with the given string."""
  sku_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  quantityAllocated: Int

  """All values that are not equal to given value."""
  quantityAllocated_not: Int

  """All values that are contained in given list."""
  quantityAllocated_in: [Int!]

  """All values that are not contained in given list."""
  quantityAllocated_not_in: [Int!]

  """All values less than the given value."""
  quantityAllocated_lt: Int

  """All values less than or equal the given value."""
  quantityAllocated_lte: Int

  """All values greater than the given value."""
  quantityAllocated_gt: Int

  """All values greater than or equal the given value."""
  quantityAllocated_gte: Int
  stockQuantity: Int

  """All values that are not equal to given value."""
  stockQuantity_not: Int

  """All values that are contained in given list."""
  stockQuantity_in: [Int!]

  """All values that are not contained in given list."""
  stockQuantity_not_in: [Int!]

  """All values less than the given value."""
  stockQuantity_lt: Int

  """All values less than or equal the given value."""
  stockQuantity_lte: Int

  """All values greater than the given value."""
  stockQuantity_gt: Int

  """All values greater than or equal the given value."""
  stockQuantity_gte: Int
  isAvailable: Boolean

  """All values that are not equal to given value."""
  isAvailable_not: Boolean
  product: ProductWhereInput
  weight: WeightWhereInput
  price: MoneyWhereInput
  costPrice: MoneyWhereInput
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  """Logical AND on all given filters."""
  AND: [ProductWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProductWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProductWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isAvailable: Boolean

  """All values that are not equal to given value."""
  isAvailable_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  productImages_every: ProductImageWhereInput
  productImages_some: ProductImageWhereInput
  productImages_none: ProductImageWhereInput
  basePrice: MoneyWhereInput
  category: CategoryWhereInput
  productVariants_every: ProductVariantWhereInput
  productVariants_some: ProductVariantWhereInput
  productVariants_none: ProductVariantWhereInput
  productType: ProductTypeWhereInput
  weight: WeightWhereInput
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  productImages(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductImage]!
  attributes(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attribute]!
  stocks(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock]!
  weights(where: WeightWhereInput, orderBy: WeightOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Weight]!
  productVariants(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductVariant]!
  stockLocations(where: StockLocationWhereInput, orderBy: StockLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StockLocation]!
  attributeValues(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AttributeValue]!
  productTypes(where: ProductTypeWhereInput, orderBy: ProductTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProductType]!
  moneys(where: MoneyWhereInput, orderBy: MoneyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Money]!
  taxes(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tax]!
  user(where: UserWhereUniqueInput!): User
  product(where: ProductWhereUniqueInput!): Product
  category(where: CategoryWhereUniqueInput!): Category
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  attribute(where: AttributeWhereUniqueInput!): Attribute
  stock(where: StockWhereUniqueInput!): Stock
  weight(where: WeightWhereUniqueInput!): Weight
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  stockLocation(where: StockLocationWhereUniqueInput!): StockLocation
  attributeValue(where: AttributeValueWhereUniqueInput!): AttributeValue
  productType(where: ProductTypeWhereUniqueInput!): ProductType
  money(where: MoneyWhereUniqueInput!): Money
  tax(where: TaxWhereUniqueInput!): Tax
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  productImagesConnection(where: ProductImageWhereInput, orderBy: ProductImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductImageConnection!
  attributesConnection(where: AttributeWhereInput, orderBy: AttributeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeConnection!
  stocksConnection(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockConnection!
  weightsConnection(where: WeightWhereInput, orderBy: WeightOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeightConnection!
  productVariantsConnection(where: ProductVariantWhereInput, orderBy: ProductVariantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductVariantConnection!
  stockLocationsConnection(where: StockLocationWhereInput, orderBy: StockLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockLocationConnection!
  attributeValuesConnection(where: AttributeValueWhereInput, orderBy: AttributeValueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributeValueConnection!
  productTypesConnection(where: ProductTypeWhereInput, orderBy: ProductTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductTypeConnection!
  moneysConnection(where: MoneyWhereInput, orderBy: MoneyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MoneyConnection!
  taxesConnection(where: TaxWhereInput, orderBy: TaxOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaxConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stock implements Node {
  id: ID!
  quantity: Int!
  quantityAllocated: Int
  variant: ProductVariant
  location: StockLocation!
}

"""A connection to a list of items."""
type StockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockEdge]!
  aggregate: AggregateStock!
}

input StockCreateInput {
  id: ID
  quantity: Int!
  quantityAllocated: Int
  variant: ProductVariantCreateOneInput
  location: StockLocationCreateOneInput!
}

"""An edge in a connection."""
type StockEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

type StockLocation implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type StockLocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockLocationEdge]!
  aggregate: AggregateStockLocation!
}

input StockLocationCreateInput {
  id: ID
  name: String!
}

input StockLocationCreateOneInput {
  create: StockLocationCreateInput
  connect: StockLocationWhereUniqueInput
}

"""An edge in a connection."""
type StockLocationEdge {
  """The item at the end of the edge."""
  node: StockLocation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockLocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type StockLocationPreviousValues {
  id: ID!
  name: String!
}

type StockLocationSubscriptionPayload {
  mutation: MutationType!
  node: StockLocation
  updatedFields: [String!]
  previousValues: StockLocationPreviousValues
}

input StockLocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockLocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockLocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockLocationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockLocationWhereInput
}

input StockLocationUpdateDataInput {
  name: String
}

input StockLocationUpdateInput {
  name: String
}

input StockLocationUpdateManyMutationInput {
  name: String
}

input StockLocationUpdateOneRequiredInput {
  create: StockLocationCreateInput
  connect: StockLocationWhereUniqueInput
  update: StockLocationUpdateDataInput
  upsert: StockLocationUpsertNestedInput
}

input StockLocationUpsertNestedInput {
  update: StockLocationUpdateDataInput!
  create: StockLocationCreateInput!
}

input StockLocationWhereInput {
  """Logical AND on all given filters."""
  AND: [StockLocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockLocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockLocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input StockLocationWhereUniqueInput {
  id: ID
}

enum StockOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  quantityAllocated_ASC
  quantityAllocated_DESC
}

type StockPreviousValues {
  id: ID!
  quantity: Int!
  quantityAllocated: Int
}

type StockSubscriptionPayload {
  mutation: MutationType!
  node: Stock
  updatedFields: [String!]
  previousValues: StockPreviousValues
}

input StockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockWhereInput
}

input StockUpdateInput {
  quantity: Int
  quantityAllocated: Int
  variant: ProductVariantUpdateOneInput
  location: StockLocationUpdateOneRequiredInput
}

input StockUpdateManyMutationInput {
  quantity: Int
  quantityAllocated: Int
}

input StockWhereInput {
  """Logical AND on all given filters."""
  AND: [StockWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  quantityAllocated: Int

  """All values that are not equal to given value."""
  quantityAllocated_not: Int

  """All values that are contained in given list."""
  quantityAllocated_in: [Int!]

  """All values that are not contained in given list."""
  quantityAllocated_not_in: [Int!]

  """All values less than the given value."""
  quantityAllocated_lt: Int

  """All values less than or equal the given value."""
  quantityAllocated_lte: Int

  """All values greater than the given value."""
  quantityAllocated_gt: Int

  """All values greater than or equal the given value."""
  quantityAllocated_gte: Int
  variant: ProductVariantWhereInput
  location: StockLocationWhereInput
}

input StockWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  productImage(where: ProductImageSubscriptionWhereInput): ProductImageSubscriptionPayload
  attribute(where: AttributeSubscriptionWhereInput): AttributeSubscriptionPayload
  stock(where: StockSubscriptionWhereInput): StockSubscriptionPayload
  weight(where: WeightSubscriptionWhereInput): WeightSubscriptionPayload
  productVariant(where: ProductVariantSubscriptionWhereInput): ProductVariantSubscriptionPayload
  stockLocation(where: StockLocationSubscriptionWhereInput): StockLocationSubscriptionPayload
  attributeValue(where: AttributeValueSubscriptionWhereInput): AttributeValueSubscriptionPayload
  productType(where: ProductTypeSubscriptionWhereInput): ProductTypeSubscriptionPayload
  money(where: MoneySubscriptionWhereInput): MoneySubscriptionPayload
  tax(where: TaxSubscriptionWhereInput): TaxSubscriptionPayload
}

type Tax implements Node {
  id: ID!
  name: String!
  taxRate: Int!
}

"""A connection to a list of items."""
type TaxConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaxEdge]!
  aggregate: AggregateTax!
}

input TaxCreateInput {
  id: ID
  name: String!
  taxRate: Int!
}

input TaxCreateOneInput {
  create: TaxCreateInput
  connect: TaxWhereUniqueInput
}

"""An edge in a connection."""
type TaxEdge {
  """The item at the end of the edge."""
  node: Tax!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaxOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  taxRate_ASC
  taxRate_DESC
}

type TaxPreviousValues {
  id: ID!
  name: String!
  taxRate: Int!
}

type TaxSubscriptionPayload {
  mutation: MutationType!
  node: Tax
  updatedFields: [String!]
  previousValues: TaxPreviousValues
}

input TaxSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaxWhereInput
}

input TaxUpdateDataInput {
  name: String
  taxRate: Int
}

input TaxUpdateInput {
  name: String
  taxRate: Int
}

input TaxUpdateManyMutationInput {
  name: String
  taxRate: Int
}

input TaxUpdateOneInput {
  create: TaxCreateInput
  connect: TaxWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TaxUpdateDataInput
  upsert: TaxUpsertNestedInput
}

input TaxUpsertNestedInput {
  update: TaxUpdateDataInput!
  create: TaxCreateInput!
}

input TaxWhereInput {
  """Logical AND on all given filters."""
  AND: [TaxWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaxWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaxWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  taxRate: Int

  """All values that are not equal to given value."""
  taxRate_not: Int

  """All values that are contained in given list."""
  taxRate_in: [Int!]

  """All values that are not contained in given list."""
  taxRate_not_in: [Int!]

  """All values less than the given value."""
  taxRate_lt: Int

  """All values less than or equal the given value."""
  taxRate_lte: Int

  """All values greater than the given value."""
  taxRate_gt: Int

  """All values greater than or equal the given value."""
  taxRate_gte: Int
}

input TaxWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Weight implements Node {
  id: ID!
  unit: String!
  value: Float!
}

"""A connection to a list of items."""
type WeightConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WeightEdge]!
  aggregate: AggregateWeight!
}

input WeightCreateInput {
  id: ID
  unit: String!
  value: Float!
}

input WeightCreateOneInput {
  create: WeightCreateInput
  connect: WeightWhereUniqueInput
}

"""An edge in a connection."""
type WeightEdge {
  """The item at the end of the edge."""
  node: Weight!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WeightOrderByInput {
  id_ASC
  id_DESC
  unit_ASC
  unit_DESC
  value_ASC
  value_DESC
}

type WeightPreviousValues {
  id: ID!
  unit: String!
  value: Float!
}

type WeightSubscriptionPayload {
  mutation: MutationType!
  node: Weight
  updatedFields: [String!]
  previousValues: WeightPreviousValues
}

input WeightSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WeightSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeightSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeightSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeightWhereInput
}

input WeightUpdateDataInput {
  unit: String
  value: Float
}

input WeightUpdateInput {
  unit: String
  value: Float
}

input WeightUpdateManyMutationInput {
  unit: String
  value: Float
}

input WeightUpdateOneInput {
  create: WeightCreateInput
  connect: WeightWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WeightUpdateDataInput
  upsert: WeightUpsertNestedInput
}

input WeightUpsertNestedInput {
  update: WeightUpdateDataInput!
  create: WeightCreateInput!
}

input WeightWhereInput {
  """Logical AND on all given filters."""
  AND: [WeightWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeightWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeightWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  unit: String

  """All values that are not equal to given value."""
  unit_not: String

  """All values that are contained in given list."""
  unit_in: [String!]

  """All values that are not contained in given list."""
  unit_not_in: [String!]

  """All values less than the given value."""
  unit_lt: String

  """All values less than or equal the given value."""
  unit_lte: String

  """All values greater than the given value."""
  unit_gt: String

  """All values greater than or equal the given value."""
  unit_gte: String

  """All values containing the given string."""
  unit_contains: String

  """All values not containing the given string."""
  unit_not_contains: String

  """All values starting with the given string."""
  unit_starts_with: String

  """All values not starting with the given string."""
  unit_not_starts_with: String

  """All values ending with the given string."""
  unit_ends_with: String

  """All values not ending with the given string."""
  unit_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

input WeightWhereUniqueInput {
  id: ID
}
