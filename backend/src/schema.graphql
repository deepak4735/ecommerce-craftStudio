# import * from './generated/prisma.graphql'
type SuccessMessage {
  message: String
}

type Mutation {
  createUser(
    name: String!
    email: String!
    password: String
    permissions: UserCreatepermissionsInput
  ): User!
  signIn(email: String!, password: String!): User!
  signOut: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmedPassword: String!
  ): User!
  createProduct(
    title: String!
    description: String!
    price: Int!
    productImages: ProductImageCreateManyWithoutProductInput
    available: Boolean!
  ): Product!
  deleteProduct(id: ID!): Product
  updateProduct(
    id: ID!
    title: String
    description: String
    price: Int
    available: Boolean
  ): Product
  createCategory(name: String!, slug: String, description: String): Category
  updateCategory(
    id: ID
    name: String
    slug: String
    description: String
  ): Category
  deleteCategory(id: ID): Category
  deleteManyCategories(id_in: [ID!]): BatchPayload!
  createProductType(
    id: ID
    name: String!
    shippingRequired: Boolean
    hasVariants: Boolean
    weight: WeightCreateOneInput
    taxes: TaxCreateOneInput
    productAttributes: AttributeCreateManyWithoutProductTypeInput
    variantAttributes: AttributeCreateManyWithoutProductVariantTypeInput
  ): ProductType
  updateProductType(
    id: ID
    name: String
    shippingRequired: Boolean
    hasVariants: Boolean
    weight: WeightUpdateOneInput
    taxes: TaxUpdateOneInput
  ): ProductType
  createProductTypeAttribute(
    id: ID
    attributeName: String!
    productType: ProductTypeCreateOneWithoutProductAttributesInput
    attributeValues: AttributeValueCreateManyInput
  ): Attribute
  updateProductTypeAttribute(
    id: ID
    attributeName: String
    productType: ProductTypeUpdateOneWithoutProductAttributesInput
    productVariantType: ProductTypeUpdateOneWithoutVariantAttributesInput
    attributeValues: AttributeValueUpdateManyInput
  ): Attribute
  deleteAttribute(id: ID): Attribute
  deleteAttributeValue(id: ID): AttributeValue
}

# ProductImageCreateManyWithoutProductInput
# [ProductImageCreateWithoutProductInput!]

type Query {
  users: [User]!
  currentUser: User
  products: [Product]!
  productImages: [ProductImage]
  productTypes: [ProductType]
  productType(where: ProductTypeWhereUniqueInput): ProductType
  attributes: [Attribute]
  categories: [Category]
  category(where: CategoryWhereUniqueInput): Category
}

type User {
  id: ID!
  name: String!
  email: String!
  permissions: [Permission]
}
